//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from P:/source/repos/antlr-mega-tutorial/antlr-csharp/antlr-csharp\Spreadsheet.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class SpreadsheetLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, ASTERISK=4, SLASH=5, PLUS=6, MINUS=7, ID=8, NAME=9, 
		NUMBER=10, WHITESPACE=11;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "LETTER", "DIGIT", "ASTERISK", "SLASH", "PLUS", 
		"MINUS", "ID", "NAME", "NUMBER", "WHITESPACE"
	};


	public SpreadsheetLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SpreadsheetLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'^'", "'*'", "'/'", "'+'", "'-'", null, null, null, 
		"' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "ASTERISK", "SLASH", "PLUS", "MINUS", "ID", "NAME", 
		"NUMBER", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Spreadsheet.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SpreadsheetLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,11,70,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,1,1,1,1,
		1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,
		10,4,10,50,8,10,11,10,12,10,51,1,11,4,11,55,8,11,11,11,12,11,56,1,11,1,
		11,4,11,61,8,11,11,11,12,11,62,3,11,65,8,11,1,12,1,12,1,12,1,12,0,0,13,
		1,1,3,2,5,3,7,0,9,0,11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,11,1,0,2,2,
		0,65,90,97,122,1,0,48,57,71,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,11,1,
		0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
		0,23,1,0,0,0,0,25,1,0,0,0,1,27,1,0,0,0,3,29,1,0,0,0,5,31,1,0,0,0,7,33,
		1,0,0,0,9,35,1,0,0,0,11,37,1,0,0,0,13,39,1,0,0,0,15,41,1,0,0,0,17,43,1,
		0,0,0,19,45,1,0,0,0,21,49,1,0,0,0,23,54,1,0,0,0,25,66,1,0,0,0,27,28,5,
		40,0,0,28,2,1,0,0,0,29,30,5,41,0,0,30,4,1,0,0,0,31,32,5,94,0,0,32,6,1,
		0,0,0,33,34,7,0,0,0,34,8,1,0,0,0,35,36,7,1,0,0,36,10,1,0,0,0,37,38,5,42,
		0,0,38,12,1,0,0,0,39,40,5,47,0,0,40,14,1,0,0,0,41,42,5,43,0,0,42,16,1,
		0,0,0,43,44,5,45,0,0,44,18,1,0,0,0,45,46,3,7,3,0,46,47,3,9,4,0,47,20,1,
		0,0,0,48,50,3,7,3,0,49,48,1,0,0,0,50,51,1,0,0,0,51,49,1,0,0,0,51,52,1,
		0,0,0,52,22,1,0,0,0,53,55,3,9,4,0,54,53,1,0,0,0,55,56,1,0,0,0,56,54,1,
		0,0,0,56,57,1,0,0,0,57,64,1,0,0,0,58,60,5,46,0,0,59,61,3,9,4,0,60,59,1,
		0,0,0,61,62,1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,65,1,0,0,0,64,58,1,
		0,0,0,64,65,1,0,0,0,65,24,1,0,0,0,66,67,5,32,0,0,67,68,1,0,0,0,68,69,6,
		12,0,0,69,26,1,0,0,0,5,0,51,56,62,64,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
